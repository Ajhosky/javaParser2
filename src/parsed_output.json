[ {
  "MethodCalls" : {
    "ranomNumberAccount" : [ ],
    "accountExists" : [ "characters.length", "randomString.append", "randomString.toString", "length", "toString", "nextInt", "random.nextInt", "charAt", "characters.charAt", "append" ]
  },
  "PackageName" : "com.example.demo",
  "MethodDetails" : {
    "ranomNumberAccount" : {
      "StartLine" : 30,
      "EndLine" : 44
    },
    "accountExists" : {
      "StartLine" : 24,
      "EndLine" : 27
    }
  },
  "ClassAnnotations" : [ "Component" ],
  "Imports" : [ "org.springframework.stereotype.Component", "com.example.demo.model.TransactionDTO", "com.example.demo.service.AccountService", "org.springframework.beans.factory.annotation.Autowired", "org.springframework.http.ResponseEntity", "java.util.Random", "com.example.demo.service.TransactionService" ],
  "Code" : "package com.example.demo;\r\n\r\nimport com.example.demo.model.TransactionDTO;\r\nimport com.example.demo.service.AccountService;\r\nimport com.example.demo.service.TransactionService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Random;\r\n\r\n@Component\r\npublic class AuxilaryFunctions {\r\n\r\n\r\n\r\n     private final AccountService accountService;\r\n\r\n    @Autowired\r\n    public AuxilaryFunctions(AccountService accountService) {\r\n        this.accountService = accountService;\r\n    }\r\n\r\n    public boolean accountExists(long sender_id, long receiver_id) {\r\n        return (accountService.existsById(sender_id)) && (accountService.existsById(receiver_id));\r\n\r\n    }\r\n\r\n\r\n    public String ranomNumberAccount(int length) {\r\n        String characters =\"0123456789\";\r\n\r\n        Random random = new Random();\r\n\r\n        StringBuilder randomString = new StringBuilder(length);\r\n\r\n        for (int i = 0; i < length; i++) {\r\n            int randomIndex = random.nextInt(characters.length());\r\n            randomString.append(characters.charAt(randomIndex));\r\n        }\r\n\r\n        return randomString.toString();\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "ranomNumberAccount" : "String",
    "accountExists" : "boolean"
  },
  "Fields" : [ "accountService" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "AuxilaryFunctions",
  "MethodParameters" : {
    "ranomNumberAccount" : [ "int length" ],
    "accountExists" : [ "long sender_id", "long receiver_id" ]
  },
  "Methods" : [ "ranomNumberAccount", "accountExists" ],
  "ObjectCreations" : [ "Random", "StringBuilder" ]
}, {
  "MethodCalls" : {
    "getAccountDTOs" : [ "ResponseEntity.notFound", "ResponseEntity.accepted", "build", "getAccountDTO", "accountService.getAccountDTO", "accepted", "notFound", "body" ],
    "getAccount" : [ "ResponseEntity.status", "createAccountFromDTO", "accountService.createAccountFromDTO", "body", "status" ],
    "createAccount" : [ "ResponseEntity.notFound", "existsById", "ResponseEntity.status", "build", "accountService.updateAccountFromDTO", "updateAccountFromDTO", "accountService.existsById", "notFound", "body", "status" ],
    "deleteAccount" : [ ],
    "updateAccount" : [ "ResponseEntity.notFound", "noContent", "existsById", "build", "ResponseEntity.noContent", "accountService.existsById", "notFound", "accountService.deleteAccount", "deleteAccount" ]
  },
  "PackageName" : "com.example.demo.controller",
  "MethodDetails" : {
    "getAccountDTOs" : {
      "StartLine" : 19,
      "EndLine" : 22
    },
    "getAccount" : {
      "StartLine" : 24,
      "EndLine" : 31
    },
    "createAccount" : {
      "StartLine" : 33,
      "EndLine" : 37
    },
    "deleteAccount" : {
      "StartLine" : 49,
      "EndLine" : 57
    },
    "updateAccount" : {
      "StartLine" : 39,
      "EndLine" : 47
    }
  },
  "ClassAnnotations" : [ "RestController", "RequiredArgsConstructor" ],
  "Imports" : [ "org.springframework.http.HttpStatus", "java.util.List", "com.example.demo.model.Account", "com.example.demo.model.AccountDTO", "com.example.demo.service.AccountService", "lombok.RequiredArgsConstructor", "org.springframework.web.bind.annotation", "org.springframework.http.ResponseEntity" ],
  "Code" : "package com.example.demo.controller;\r\n\r\nimport com.example.demo.model.Account;\r\nimport com.example.demo.model.AccountDTO;\r\nimport com.example.demo.service.AccountService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\npublic class AccountController {\r\n\r\n    private final AccountService accountService;\r\n\r\n    @GetMapping(\"/accounts\")\r\n    public List<AccountDTO> getAccountDTOs() {\r\n        return accountService.getAllAccountDTOs();\r\n    }\r\n\r\n    @GetMapping(\"/accounts/{id}\")\r\n    public ResponseEntity<AccountDTO> getAccount(@PathVariable Long id) {\r\n        AccountDTO accountDTO = accountService.getAccountDTO(id);\r\n        if (accountDTO == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.accepted().body(accountDTO);\r\n    }\r\n\r\n    @PostMapping(\"/createAccounts\")\r\n    public ResponseEntity<Account> createAccount(@RequestBody AccountDTO accountDTO) {\r\n        Account account = accountService.createAccountFromDTO(accountDTO);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(account);\r\n    }\r\n\r\n    @PutMapping(\"/updateAccounts/{id}\")\r\n    public ResponseEntity<Object> updateAccount(@PathVariable Long id, @RequestBody AccountDTO accountDTO) {\r\n        if (!accountService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n\r\n        AccountDTO updatedDTO = accountService.updateAccountFromDTO(id, accountDTO);\r\n        return ResponseEntity.status(HttpStatus.ACCEPTED).body(updatedDTO);\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteAccounts/{id}\")\r\n    public ResponseEntity<Object> deleteAccount(@PathVariable Long id) {\r\n        if (accountService.existsById(id)) {\r\n            accountService.deleteAccount(id);\r\n            return ResponseEntity.noContent().build();\r\n        } else {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "getAccountDTOs" : "List<AccountDTO>",
    "getAccount" : "ResponseEntity<AccountDTO>",
    "createAccount" : "ResponseEntity<Account>",
    "deleteAccount" : "ResponseEntity<Object>",
    "updateAccount" : "ResponseEntity<Object>"
  },
  "Fields" : [ "accountService" ],
  "MethodAnnotations" : [ "GetMapping", "PostMapping", "DeleteMapping", "PutMapping" ],
  "ClassName" : "AccountController",
  "MethodParameters" : {
    "getAccountDTOs" : [ ],
    "getAccount" : [ "Long id" ],
    "createAccount" : [ "AccountDTO accountDTO" ],
    "deleteAccount" : [ "Long id" ],
    "updateAccount" : [ "AccountDTO accountDTO", "Long id" ]
  },
  "Methods" : [ "getAccountDTOs", "getAccount", "createAccount", "deleteAccount", "updateAccount" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "createAddress" : [ "ResponseEntity.notFound", "existsById", "ResponseEntity.status", "updateAddressFromDTO", "build", "addressService.existsById", "notFound", "addressService.updateAddressFromDTO", "body", "status" ],
    "updateAddress" : [ "ResponseEntity.notFound", "noContent", "existsById", "addressService.deleteAddress", "build", "addressService.existsById", "ResponseEntity.noContent", "notFound", "deleteAddress" ],
    "getAddress" : [ "createAddressFromDTO", "ResponseEntity.status", "addressService.createAddressFromDTO", "body", "status" ],
    "deleteAddress" : [ ],
    "getAllAddresses" : [ "ResponseEntity.notFound", "ResponseEntity.accepted", "build", "accepted", "notFound", "body", "getAddressDTO", "addressService.getAddressDTO" ]
  },
  "PackageName" : "com.example.demo.controller",
  "MethodDetails" : {
    "createAddress" : {
      "StartLine" : 37,
      "EndLine" : 41
    },
    "updateAddress" : {
      "StartLine" : 43,
      "EndLine" : 50
    },
    "getAddress" : {
      "StartLine" : 28,
      "EndLine" : 35
    },
    "deleteAddress" : {
      "StartLine" : 52,
      "EndLine" : 59
    },
    "getAllAddresses" : {
      "StartLine" : 19,
      "EndLine" : 26
    }
  },
  "ClassAnnotations" : [ "RestController", "RequiredArgsConstructor" ],
  "Imports" : [ "com.example.demo.service.AddressService", "org.springframework.http.HttpStatus", "java.util.List", "com.example.demo.model.AddressDTO", "com.example.demo.model.Address", "lombok.RequiredArgsConstructor", "org.springframework.web.bind.annotation", "org.springframework.http.ResponseEntity" ],
  "Code" : "package com.example.demo.controller;\r\n\r\nimport com.example.demo.model.Address;\r\nimport com.example.demo.model.AddressDTO;\r\nimport com.example.demo.service.AddressService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\npublic class AddressController {\r\n\r\n    private final AddressService addressService;\r\n\r\n    @GetMapping(\"/addresses\")\r\n    public ResponseEntity<List<AddressDTO>> getAllAddresses() {\r\n        List<AddressDTO> addressDTOS = addressService.getAllAddressDTOs();\r\n        if (addressDTOS.isEmpty()) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.ok(addressDTOS);\r\n    }\r\n\r\n    @GetMapping(\"/addresses/{id}\")\r\n    public ResponseEntity<AddressDTO> getAddress(@PathVariable Long id) {\r\n        AddressDTO addressDTO = addressService.getAddressDTO(id);\r\n        if (addressDTO == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.accepted().body(addressDTO);\r\n    }\r\n\r\n    @PostMapping(\"/createAddresses\")\r\n    public ResponseEntity<Address> createAddress(@RequestBody AddressDTO addressDTO) {\r\n        Address address = addressService.createAddressFromDTO(addressDTO);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(address);\r\n    }\r\n\r\n    @PutMapping(\"/updateAddresses/{id}\")\r\n    public ResponseEntity<Object> updateAddress(@PathVariable Long id, @RequestBody AddressDTO addressDTO) {\r\n        if (!addressService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        AddressDTO updatedDTO = addressService.updateAddressFromDTO(id, addressDTO);\r\n        return ResponseEntity.status(HttpStatus.ACCEPTED).body(updatedDTO);\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteAddresses/{id}\")\r\n    public ResponseEntity<Object> deleteAddress(@PathVariable Long id) {\r\n        if (!addressService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        addressService.deleteAddress(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "createAddress" : "ResponseEntity<Address>",
    "updateAddress" : "ResponseEntity<Object>",
    "getAddress" : "ResponseEntity<AddressDTO>",
    "deleteAddress" : "ResponseEntity<Object>",
    "getAllAddresses" : "ResponseEntity<List<AddressDTO>>"
  },
  "Fields" : [ "addressService" ],
  "MethodAnnotations" : [ "GetMapping", "PostMapping", "DeleteMapping", "PutMapping" ],
  "ClassName" : "AddressController",
  "MethodParameters" : {
    "createAddress" : [ "AddressDTO addressDTO" ],
    "updateAddress" : [ "AddressDTO addressDTO", "Long id" ],
    "getAddress" : [ "Long id" ],
    "deleteAddress" : [ "Long id" ],
    "getAllAddresses" : [ ]
  },
  "Methods" : [ "createAddress", "updateAddress", "getAddress", "deleteAddress", "getAllAddresses" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "createClient" : [ "ResponseEntity.notFound", "process", "clientService.process", "ResponseEntity.status", "body", "clientService.findClientById", "findClientById", "existsById", "build", "notFound", "clientService.updateClientFromDTO", "clientService.existsById", "updateClientFromDTO", "status" ],
    "updateClient" : [ "ResponseEntity.notFound", "noContent", "existsById", "build", "deleteClient", "ResponseEntity.noContent", "notFound", "clientService.existsById", "clientService.deleteClient" ],
    "deleteClient" : [ ],
    "getAllClients" : [ "getClientDTO", "clientService.getClientDTO", "ResponseEntity.notFound", "ResponseEntity.accepted", "build", "accepted", "notFound", "body" ],
    "getClient" : [ "clientService.createClientFromDTO", "createClientFromDTO", "process", "clientService.process", "ResponseEntity.status", "body", "status" ]
  },
  "PackageName" : "com.example.demo.controller",
  "MethodDetails" : {
    "createClient" : {
      "StartLine" : 37,
      "EndLine" : 42
    },
    "updateClient" : {
      "StartLine" : 44,
      "EndLine" : 53
    },
    "deleteClient" : {
      "StartLine" : 55,
      "EndLine" : 62
    },
    "getAllClients" : {
      "StartLine" : 19,
      "EndLine" : 26
    },
    "getClient" : {
      "StartLine" : 28,
      "EndLine" : 35
    }
  },
  "ClassAnnotations" : [ "RestController", "RequiredArgsConstructor" ],
  "Imports" : [ "org.springframework.http.HttpStatus", "java.util.List", "com.example.demo.model.Client", "lombok.RequiredArgsConstructor", "org.springframework.web.bind.annotation", "com.example.demo.service.ClientService", "org.springframework.http.ResponseEntity", "com.example.demo.model.ClientDTO" ],
  "Code" : "package com.example.demo.controller;\r\n\r\nimport com.example.demo.model.Client;\r\nimport com.example.demo.model.ClientDTO;\r\nimport com.example.demo.service.ClientService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\npublic class ClientController {\r\n\r\n    private final ClientService clientService;\r\n\r\n    @GetMapping(\"/clients\")\r\n    public ResponseEntity<List<ClientDTO>> getAllClients() {\r\n        List<ClientDTO> clientDTOS = clientService.getAllClientDTOs();\r\n        if (clientDTOS.isEmpty()) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.ok(clientDTOS);\r\n    }\r\n\r\n    @GetMapping(\"/clients/{id}\")\r\n    public ResponseEntity<ClientDTO> getClient(@PathVariable Long id) {\r\n        ClientDTO clientDTO = clientService.getClientDTO(id);\r\n        if (clientDTO == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.accepted().body(clientDTO);\r\n    }\r\n\r\n    @PostMapping(\"/createClients\")\r\n    public ResponseEntity<Client> createClient(@RequestBody ClientDTO clientDTO) {\r\n        Client client = clientService.createClientFromDTO(clientDTO);\r\n        clientService.process(client);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(client);\r\n    }\r\n\r\n    @PutMapping(\"/updateClients/{id}\")\r\n    public ResponseEntity<Object> updateClient(@PathVariable Long id, @RequestBody ClientDTO clientDTO) {\r\n        if (!clientService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        ClientDTO updatedDTO = clientService.updateClientFromDTO(id, clientDTO);\r\n        Client updatedClient = clientService.findClientById(id);\r\n        clientService.process(updatedClient);\r\n        return ResponseEntity.status(HttpStatus.ACCEPTED).body(updatedDTO);\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteClients/{id}\")\r\n    public ResponseEntity<Object> deleteClient(@PathVariable Long id) {\r\n        if (!clientService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        clientService.deleteClient(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "createClient" : "ResponseEntity<Client>",
    "updateClient" : "ResponseEntity<Object>",
    "deleteClient" : "ResponseEntity<Object>",
    "getAllClients" : "ResponseEntity<List<ClientDTO>>",
    "getClient" : "ResponseEntity<ClientDTO>"
  },
  "Fields" : [ "clientService" ],
  "MethodAnnotations" : [ "GetMapping", "PostMapping", "DeleteMapping", "PutMapping" ],
  "ClassName" : "ClientController",
  "MethodParameters" : {
    "createClient" : [ "ClientDTO clientDTO" ],
    "updateClient" : [ "ClientDTO clientDTO", "Long id" ],
    "deleteClient" : [ "Long id" ],
    "getAllClients" : [ ],
    "getClient" : [ "Long id" ]
  },
  "Methods" : [ "createClient", "updateClient", "deleteClient", "getAllClients", "getClient" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "updateTransaction" : [ "ResponseEntity.notFound", "noContent", "existsById", "transactionService.existsById", "build", "ResponseEntity.noContent", "notFound", "deleteTransaction", "transactionService.deleteTransaction" ],
    "deleteTransaction" : [ ],
    "getTransactionsForAccount" : [ "ResponseEntity.notFound", "ResponseEntity.accepted", "getTransactionDTO", "build", "accepted", "notFound", "transactionService.getTransactionDTO", "body" ],
    "createTransaction" : [ "ResponseEntity.notFound", "existsById", "transactionService.existsById", "ResponseEntity.status", "build", "transactionService.updateTransactionFromDTO", "notFound", "updateTransactionFromDTO", "body", "status" ],
    "getTransaction" : [ "ResponseEntity.notFound", "transactionService.createTransactionFromDTO", "ResponseEntity.status", "build", "notFound", "createTransactionFromDTO", "body", "status" ]
  },
  "PackageName" : "com.example.demo.controller",
  "MethodDetails" : {
    "updateTransaction" : {
      "StartLine" : 46,
      "EndLine" : 56
    },
    "deleteTransaction" : {
      "StartLine" : 58,
      "EndLine" : 65
    },
    "getTransactionsForAccount" : {
      "StartLine" : 19,
      "EndLine" : 26
    },
    "createTransaction" : {
      "StartLine" : 37,
      "EndLine" : 44
    },
    "getTransaction" : {
      "StartLine" : 28,
      "EndLine" : 35
    }
  },
  "ClassAnnotations" : [ "RestController", "RequiredArgsConstructor" ],
  "Imports" : [ "org.springframework.http.HttpStatus", "java.util.List", "com.example.demo.model.TransactionDTO", "lombok.RequiredArgsConstructor", "org.springframework.web.bind.annotation", "org.springframework.http.ResponseEntity", "com.example.demo.service.TransactionService", "com.example.demo.model.Transaction" ],
  "Code" : "package com.example.demo.controller;\r\n\r\nimport com.example.demo.model.Transaction;\r\nimport com.example.demo.model.TransactionDTO;\r\nimport com.example.demo.service.TransactionService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\npublic class TransactionController {\r\n\r\n    private final TransactionService transactionService;\r\n\r\n    @GetMapping(\"/transactions/account/{accountId}\")\r\n    public ResponseEntity<List<TransactionDTO>> getTransactionsForAccount(@PathVariable Long accountId) {\r\n        List<TransactionDTO> transactionDTOs = transactionService.getTransactionDTOsForAccount(accountId);\r\n        if (transactionDTOs.isEmpty()) {\r\n            return ResponseEntity.noContent().build();\r\n        }\r\n        return ResponseEntity.ok(transactionDTOs);\r\n    }\r\n\r\n    @GetMapping(\"/transactions/{id}\")\r\n    public ResponseEntity<TransactionDTO> getTransaction(@PathVariable Long id) {\r\n        TransactionDTO transactionDTO = transactionService.getTransactionDTO(id);\r\n        if (transactionDTO == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.accepted().body(transactionDTO);\r\n    }\r\n\r\n    @PostMapping(\"/createTransactions\")\r\n    public ResponseEntity<Transaction> createTransaction(@RequestBody TransactionDTO transactionDTO) {\r\n        Transaction transaction = transactionService.createTransactionFromDTO(transactionDTO);\r\n        if (transaction == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(transaction);\r\n    }\r\n\r\n    @PutMapping(\"/updateTransactions/{id}\")\r\n    public ResponseEntity<Object> updateTransaction(@PathVariable long id, @RequestBody TransactionDTO transactionDTO) {\r\n        if (!transactionService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        TransactionDTO updatedDTO = transactionService.updateTransactionFromDTO(id, transactionDTO);\r\n        if (updatedDTO == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        return ResponseEntity.status(HttpStatus.ACCEPTED).body(updatedDTO);\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteTransactions/{id}\")\r\n    public ResponseEntity<Object> deleteTransaction(@PathVariable long id) {\r\n        if (!transactionService.existsById(id)) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n        transactionService.deleteTransaction(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "updateTransaction" : "ResponseEntity<Object>",
    "deleteTransaction" : "ResponseEntity<Object>",
    "getTransactionsForAccount" : "ResponseEntity<List<TransactionDTO>>",
    "createTransaction" : "ResponseEntity<Transaction>",
    "getTransaction" : "ResponseEntity<TransactionDTO>"
  },
  "Fields" : [ "transactionService" ],
  "MethodAnnotations" : [ "GetMapping", "PostMapping", "DeleteMapping", "PutMapping" ],
  "ClassName" : "TransactionController",
  "MethodParameters" : {
    "updateTransaction" : [ "long id", "TransactionDTO transactionDTO" ],
    "deleteTransaction" : [ "long id" ],
    "getTransactionsForAccount" : [ "Long accountId" ],
    "createTransaction" : [ "TransactionDTO transactionDTO" ],
    "getTransaction" : [ "Long id" ]
  },
  "Methods" : [ "updateTransaction", "deleteTransaction", "getTransactionsForAccount", "createTransaction", "getTransaction" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "main" : [ ]
  },
  "PackageName" : "com.example.demo",
  "MethodDetails" : {
    "main" : {
      "StartLine" : 9,
      "EndLine" : 11
    }
  },
  "ClassAnnotations" : [ "SpringBootApplication" ],
  "Imports" : [ "org.springframework.boot.SpringApplication", "org.springframework.boot.autoconfigure.SpringBootApplication" ],
  "Code" : "package com.example.demo;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class DemoApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(DemoApplication.class, args);\r\n\t}\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "main" : "void"
  },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "ClassName" : "DemoApplication",
  "MethodParameters" : {
    "main" : [ "String[] args" ]
  },
  "Methods" : [ "main" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.enums",
  "MethodDetails" : { },
  "ClassAnnotations" : [ ],
  "Imports" : [ ],
  "Code" : "package com.example.demo.enums;\r\n\r\npublic enum AccountType {\r\n    CURRENT,\r\n    FIXED_DEPOSIT,\r\n    CHECKING,\r\n    SAVINGS\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.enums",
  "MethodDetails" : { },
  "ClassAnnotations" : [ ],
  "Imports" : [ ],
  "Code" : "package com.example.demo.enums;\r\n\r\npublic enum Currency {\r\n    USD,\r\n    EUR,\r\n    PLN\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.enums",
  "MethodDetails" : { },
  "ClassAnnotations" : [ ],
  "Imports" : [ ],
  "Code" : "package com.example.demo.enums;\r\n\r\npublic enum paymentMethod {\r\n    BLIK,\r\n    CARD\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.enums",
  "MethodDetails" : { },
  "ClassAnnotations" : [ ],
  "Imports" : [ ],
  "Code" : "package com.example.demo.enums;\r\n\r\npublic enum transactionStatus {\r\n    ENDED,\r\n    PENDING,\r\n    OCZEKUJACA,\r\n    ZAKONCZONA\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.enums",
  "MethodDetails" : { },
  "ClassAnnotations" : [ ],
  "Imports" : [ ],
  "Code" : "package com.example.demo.enums;\r\n\r\npublic enum transactionType {\r\n    DEPOSIT,\r\n    WITHDRAW,\r\n    TRANSFER,\r\n    WYPLATA,\r\n    WPLATA,\r\n    PRZELEW\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "NoArgsConstructor", "Entity", "AllArgsConstructor", "Getter", "Setter" ],
  "Imports" : [ "java.math.BigDecimal", "lombok.Setter", "java.util.List", "lombok.Getter", "jakarta.persistence", "java.time.LocalDate", "com.example.demo.enums.AccountType", "com.example.demo.enums.Currency", "lombok.AllArgsConstructor", "lombok.NoArgsConstructor" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport com.example.demo.enums.AccountType;\r\nimport com.example.demo.enums.Currency;\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Account {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long account_id;\r\n    private String account_number;\r\n    private BigDecimal balance;\r\n    private String owner_name;\r\n    @Enumerated(EnumType.STRING)\r\n    private AccountType account_type;\r\n    private LocalDate opening_date;\r\n    @Enumerated(EnumType.STRING)\r\n    private Currency currency;\r\n\r\n\r\n    //@OneToMany(mappedBy = \"sender_id\")\r\n    //@JsonManagedReference\r\n\r\n    @OneToMany\r\n    @JoinColumn(name = \"sender_id\")\r\n    private List<Transaction> transactions;\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ "GeneratedValue", "Enumerated", "JoinColumn", "Id", "OneToMany" ],
  "MethodReturnTypes" : { },
  "Fields" : [ "account_number", "account_type", "account_id", "owner_name", "balance", "currency", "transactions", "opening_date" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "Account",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "Getter", "Setter" ],
  "Imports" : [ "java.math.BigDecimal", "lombok.Setter", "java.util.List", "lombok.Getter", "com.example.demo.enums.AccountType", "com.example.demo.enums.Currency" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport com.example.demo.enums.AccountType;\r\nimport com.example.demo.enums.Currency;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.List;\r\n\r\n@Getter\r\n@Setter\r\npublic class AccountDTO {\r\n\r\n    //private Long account_id;\r\n    //private String account_number;\r\n    private BigDecimal balance;\r\n    private String owner_name;\r\n    private AccountType account_type;\r\n    //private LocalDate opening_date;\r\n    private Currency currency;\r\n    private List<Transaction> transactions;\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ "account_type", "owner_name", "balance", "currency", "transactions" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "AccountDTO",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "NoArgsConstructor", "Entity", "AllArgsConstructor", "Getter", "Setter" ],
  "Imports" : [ "lombok.Setter", "lombok.Getter", "jakarta.persistence", "lombok.AllArgsConstructor", "lombok.NoArgsConstructor" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Address {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long address_id;\r\n    private String city;\r\n    private String street;\r\n    private String house_number;\r\n    private String postal_code;\r\n\r\n}\r\n",
  "FieldAnnotations" : [ "GeneratedValue", "Id" ],
  "MethodReturnTypes" : { },
  "Fields" : [ "city", "street", "address_id", "house_number", "postal_code" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "Address",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "Getter", "Setter" ],
  "Imports" : [ "lombok.Setter", "lombok.Getter", "jakarta.persistence.GeneratedValue", "jakarta.persistence.GenerationType" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport lombok.Getter;\r\n\r\nimport lombok.Setter;\r\n\r\n@Getter\r\n@Setter\r\npublic class AddressDTO {\r\n\r\n    private Long address_id;\r\n    private String city;\r\n    private String street;\r\n    private String house_number;\r\n    private String postal_code;\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ "city", "street", "address_id", "house_number", "postal_code" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "AddressDTO",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "NoArgsConstructor", "Entity", "AllArgsConstructor", "Getter", "Setter" ],
  "Imports" : [ "lombok.Setter", "lombok.Getter", "jakarta.persistence", "lombok.AllArgsConstructor", "lombok.NoArgsConstructor" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Client {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long client_id;\r\n    private String name;\r\n    private String surrname;\r\n    private String pesel;\r\n    @OneToOne(cascade = CascadeType.ALL)\r\n    @JoinColumn(name = \"address_id\")\r\n    private Address address_id;\r\n    private String phone_number;\r\n    private String account_Number;\r\n\r\n}\r\n",
  "FieldAnnotations" : [ "GeneratedValue", "OneToOne", "JoinColumn", "Id" ],
  "MethodReturnTypes" : { },
  "Fields" : [ "account_Number", "name", "address_id", "phone_number", "pesel", "client_id", "surrname" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "Client",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "Getter", "Setter" ],
  "Imports" : [ "lombok.Setter", "lombok.Getter" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport lombok.Getter;\r\n\r\nimport lombok.Setter;\r\n\r\n@Getter\r\n@Setter\r\npublic class ClientDTO {\r\n\r\n    private String name;\r\n    private String surrname;\r\n    private String pesel;\r\n    private Address address_id;\r\n    private String phone_number;\r\n\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ "name", "address_id", "phone_number", "pesel", "surrname" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "ClientDTO",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "NoArgsConstructor", "Entity", "AllArgsConstructor", "Getter", "Setter" ],
  "Imports" : [ "java.math.BigDecimal", "lombok.Setter", "lombok.Getter", "jakarta.persistence", "java.time.LocalDate", "com.example.demo.enums.transactionStatus", "lombok.AllArgsConstructor", "com.example.demo.enums.transactionType", "lombok.NoArgsConstructor" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport com.example.demo.enums.transactionStatus;\r\nimport com.example.demo.enums.transactionType;\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.time.LocalDate;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Transaction {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private long transaction_id;\r\n    //    @ManyToOne(fetch = FetchType.LAZY)\r\n    //    @JoinColumn(name = \"sender_id\")\r\n    //    @JsonBackReference\r\n    private long sender_id;\r\n\r\n    //    @ManyToOne\r\n    //    @JoinColumn(name = \"receiver_id\")\r\n    //    @JsonBackReference\r\n    private long receiver_id;\r\n    private BigDecimal amount;\r\n    private LocalDate timestamp;\r\n    @Enumerated(EnumType.STRING)\r\n    private transactionType transaction_type;\r\n    @Enumerated(EnumType.STRING)\r\n    private transactionStatus transaction_status;\r\n\r\n\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ "GeneratedValue", "Enumerated", "Id" ],
  "MethodReturnTypes" : { },
  "Fields" : [ "transaction_id", "amount", "transaction_status", "receiver_id", "transaction_type", "sender_id", "timestamp" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "Transaction",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.model",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "Getter", "Setter" ],
  "Imports" : [ "java.math.BigDecimal", "lombok.Setter", "lombok.Getter", "com.example.demo.enums.transactionStatus", "com.example.demo.enums.transactionType" ],
  "Code" : "package com.example.demo.model;\r\n\r\nimport com.example.demo.enums.transactionStatus;\r\nimport com.example.demo.enums.transactionType;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport java.math.BigDecimal;\r\n\r\n\r\n@Getter\r\n@Setter\r\npublic class TransactionDTO {\r\n\r\n    private long sender_id;\r\n    private long receiver_id;\r\n    private BigDecimal amount;\r\n    //private LocalDate timestamp;\r\n    private transactionType transaction_type;\r\n    private transactionStatus transaction_status;\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ "amount", "transaction_status", "receiver_id", "transaction_type", "sender_id" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "TransactionDTO",
  "MethodParameters" : { },
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "modelMapper" : [ ]
  },
  "PackageName" : "com.example.demo",
  "MethodDetails" : {
    "modelMapper" : {
      "StartLine" : 13,
      "EndLine" : 24
    }
  },
  "ClassAnnotations" : [ "Configuration" ],
  "Imports" : [ "org.springframework.context.annotation.Configuration", "org.modelmapper.ModelMapper", "org.modelmapper.convention.MatchingStrategies", "org.springframework.context.annotation.Bean" ],
  "Code" : "package com.example.demo;\r\n\r\n\r\nimport org.modelmapper.ModelMapper;\r\n\r\nimport org.modelmapper.convention.MatchingStrategies;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class ModelMapperConfig {\r\n\r\n    @Bean\r\n    public ModelMapper modelMapper() {\r\n        ModelMapper modelMapper = new ModelMapper();\r\n\r\n\r\n        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);\r\n\r\n\r\n        return modelMapper;\r\n\r\n\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "modelMapper" : "ModelMapper"
  },
  "Fields" : [ ],
  "MethodAnnotations" : [ "Bean" ],
  "ClassName" : "ModelMapperConfig",
  "MethodParameters" : {
    "modelMapper" : [ ]
  },
  "Methods" : [ "modelMapper" ],
  "ObjectCreations" : [ "ModelMapper" ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.repository",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "Repository" ],
  "Imports" : [ "java.util.List", "com.example.demo.model.Account", "org.springframework.stereotype.Repository", "org.springframework.data.jpa.repository.JpaRepository" ],
  "Code" : "package com.example.demo.repository;\r\n\r\nimport com.example.demo.model.Account;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface AccountRepository extends JpaRepository<Account, Long> {\r\n\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "ClassName" : "AccountRepository",
  "MethodParameters" : { },
  "Extends" : "JpaRepository",
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "findAddress" : [ ]
  },
  "PackageName" : "com.example.demo.repository",
  "MethodDetails" : {
    "findAddress" : {
      "StartLine" : 14,
      "EndLine" : 15
    }
  },
  "ClassAnnotations" : [ "Repository" ],
  "Imports" : [ "org.springframework.data.jpa.repository.Query", "org.springframework.data.repository.query.Param", "java.util.List", "com.example.demo.model.Address", "org.springframework.stereotype.Repository", "org.springframework.data.jpa.repository.JpaRepository" ],
  "Code" : "package com.example.demo.repository;\r\n\r\nimport com.example.demo.model.Address;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface AddressRepository extends JpaRepository<Address, Long> {\r\n\r\n    @Query(\"SELECT a FROM Client a WHERE a.address_id = :address_id\")\r\n    Address findAddress(@Param(\"address_id\") Long address_id);\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "findAddress" : "Address"
  },
  "Fields" : [ ],
  "MethodAnnotations" : [ "Query" ],
  "ClassName" : "AddressRepository",
  "MethodParameters" : {
    "findAddress" : [ "Long address_id" ]
  },
  "Extends" : "JpaRepository",
  "Methods" : [ "findAddress" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : { },
  "PackageName" : "com.example.demo.repository",
  "MethodDetails" : { },
  "ClassAnnotations" : [ "Repository" ],
  "Imports" : [ "com.example.demo.model.Client", "org.springframework.stereotype.Repository", "org.springframework.data.jpa.repository.JpaRepository" ],
  "Code" : "package com.example.demo.repository;\r\n\r\n\r\nimport com.example.demo.model.Client;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport org.springframework.stereotype.Repository;\r\n\r\n\r\n\r\n@Repository\r\npublic interface ClientRepository extends JpaRepository<Client, Long> {\r\n\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : { },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "ClassName" : "ClientRepository",
  "MethodParameters" : { },
  "Extends" : "JpaRepository",
  "Methods" : [ ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "findAllTransactionsForAccount" : [ ]
  },
  "PackageName" : "com.example.demo.repository",
  "MethodDetails" : {
    "findAllTransactionsForAccount" : {
      "StartLine" : 15,
      "EndLine" : 16
    }
  },
  "ClassAnnotations" : [ "Repository" ],
  "Imports" : [ "org.springframework.data.jpa.repository.Query", "org.springframework.data.repository.query.Param", "java.util.List", "com.example.demo.model.Transaction", "org.springframework.stereotype.Repository", "org.springframework.data.jpa.repository.JpaRepository" ],
  "Code" : "package com.example.demo.repository;\r\n\r\n\r\nimport com.example.demo.model.Transaction;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface TransactionRepository extends JpaRepository<Transaction, Long> {\r\n\r\n    @Query(\"SELECT t FROM Transaction t WHERE t.sender_id = :accountId\")\r\n    List<Transaction> findAllTransactionsForAccount(@Param(\"accountId\") Long accountId);\r\n\r\n\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "findAllTransactionsForAccount" : "List<Transaction>"
  },
  "Fields" : [ ],
  "MethodAnnotations" : [ "Query" ],
  "ClassName" : "TransactionRepository",
  "MethodParameters" : {
    "findAllTransactionsForAccount" : [ "Long accountId" ]
  },
  "Extends" : "JpaRepository",
  "Methods" : [ "findAllTransactionsForAccount" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "existsById" : [ "modelMapper.map", "map" ],
    "getAccountDTO" : [ "Collectors.toList", "stream", "toList", "getAccounts", "map", "collect" ],
    "getAccount" : [ "getAccount", "mapEntityToDTO" ],
    "mapEntityToDTO" : [ "modelMapper.map", "map" ],
    "updateAccountFromDTO" : [ "accountRepository.deleteById", "deleteById" ],
    "getAllAccountDTOs" : [ "save", "accountRepository.save" ],
    "createAccountFromDTO" : [ "account.setAccount_id", "mapEntityToDTO", "setAccount_id", "mapDTOToEntity", "updateAccount" ],
    "getAccounts" : [ "findById", "accountRepository.findById", "orElse" ],
    "createAccount" : [ "save", "accountRepository.save" ],
    "deleteAccount" : [ "existsById", "accountRepository.existsById" ],
    "updateAccount" : [ "setOpening_date", "setAccount_number", "account.setAccount_number", "LocalDate.now", "now", "ranomNumberAccount", "auxilaryFunctions.ranomNumberAccount", "createAccount", "mapDTOToEntity", "account.setOpening_date" ],
    "mapDTOToEntity" : [ ]
  },
  "PackageName" : "com.example.demo.service",
  "MethodDetails" : {
    "existsById" : {
      "StartLine" : 71,
      "EndLine" : 73
    },
    "getAccountDTO" : {
      "StartLine" : 31,
      "EndLine" : 37
    },
    "getAccount" : {
      "StartLine" : 27,
      "EndLine" : 29
    },
    "mapEntityToDTO" : {
      "StartLine" : 75,
      "EndLine" : 77
    },
    "updateAccountFromDTO" : {
      "StartLine" : 60,
      "EndLine" : 65
    },
    "getAllAccountDTOs" : {
      "StartLine" : 39,
      "EndLine" : 43
    },
    "createAccountFromDTO" : {
      "StartLine" : 53,
      "EndLine" : 58
    },
    "getAccounts" : {
      "StartLine" : 23,
      "EndLine" : 25
    },
    "createAccount" : {
      "StartLine" : 45,
      "EndLine" : 47
    },
    "deleteAccount" : {
      "StartLine" : 67,
      "EndLine" : 69
    },
    "updateAccount" : {
      "StartLine" : 49,
      "EndLine" : 51
    },
    "mapDTOToEntity" : {
      "StartLine" : 79,
      "EndLine" : 81
    }
  },
  "ClassAnnotations" : [ "Service", "RequiredArgsConstructor" ],
  "Imports" : [ "com.example.demo.AuxilaryFunctions", "org.modelmapper.ModelMapper", "com.example.demo.repository.AccountRepository", "java.util.List", "com.example.demo.model.Account", "org.springframework.stereotype.Service", "java.time.LocalDate", "com.example.demo.model.AccountDTO", "lombok.RequiredArgsConstructor", "java.util.stream.Collectors" ],
  "Code" : "package com.example.demo.service;\r\n\r\nimport com.example.demo.AuxilaryFunctions;\r\nimport com.example.demo.model.Account;\r\nimport com.example.demo.model.AccountDTO;\r\nimport com.example.demo.repository.AccountRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AccountService {\r\n\r\n    private final AccountRepository accountRepository;\r\n    private final ModelMapper modelMapper;\r\n    private final AuxilaryFunctions auxilaryFunctions;\r\n\r\n    public List<Account> getAccounts() {\r\n        return accountRepository.findAll();\r\n    }\r\n\r\n    public Account getAccount(Long id) {\r\n        return accountRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    public AccountDTO getAccountDTO(Long id) {\r\n        Account account = getAccount(id);\r\n        if (account == null) {\r\n            return null;\r\n        }\r\n        return mapEntityToDTO(account);\r\n    }\r\n\r\n    public List<AccountDTO> getAllAccountDTOs() {\r\n        return getAccounts().stream()\r\n                .map(this::mapEntityToDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Account createAccount(Account account) {\r\n        return accountRepository.save(account);\r\n    }\r\n\r\n    public Account updateAccount(Account account) {\r\n        return accountRepository.save(account);\r\n    }\r\n\r\n    public Account createAccountFromDTO(AccountDTO accountDTO) {\r\n        Account account = mapDTOToEntity(accountDTO);\r\n        account.setAccount_number(auxilaryFunctions.ranomNumberAccount(10));\r\n        account.setOpening_date(LocalDate.now());\r\n        return createAccount(account);\r\n    }\r\n\r\n    public AccountDTO updateAccountFromDTO(Long id, AccountDTO accountDTO) {\r\n        Account account = mapDTOToEntity(accountDTO);\r\n        account.setAccount_id(id);\r\n        Account updatedAccount = updateAccount(account);\r\n        return mapEntityToDTO(updatedAccount);\r\n    }\r\n\r\n    public void deleteAccount(Long id) {\r\n        accountRepository.deleteById(id);\r\n    }\r\n\r\n    public boolean existsById(Long id) {\r\n        return accountRepository.existsById(id);\r\n    }\r\n\r\n    public AccountDTO mapEntityToDTO(Account entity) {\r\n        return modelMapper.map(entity, AccountDTO.class);\r\n    }\r\n\r\n    public Account mapDTOToEntity(AccountDTO dto) {\r\n        return modelMapper.map(dto, Account.class);\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "existsById" : "boolean",
    "getAccountDTO" : "AccountDTO",
    "getAccount" : "Account",
    "mapEntityToDTO" : "AccountDTO",
    "updateAccountFromDTO" : "AccountDTO",
    "getAllAccountDTOs" : "List<AccountDTO>",
    "createAccountFromDTO" : "Account",
    "getAccounts" : "List<Account>",
    "createAccount" : "Account",
    "deleteAccount" : "void",
    "updateAccount" : "Account",
    "mapDTOToEntity" : "Account"
  },
  "Fields" : [ "modelMapper", "auxilaryFunctions", "accountRepository" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "AccountService",
  "MethodParameters" : {
    "existsById" : [ "Long id" ],
    "getAccountDTO" : [ "Long id" ],
    "getAccount" : [ "Long id" ],
    "mapEntityToDTO" : [ "Account entity" ],
    "updateAccountFromDTO" : [ "AccountDTO accountDTO", "Long id" ],
    "getAllAccountDTOs" : [ ],
    "createAccountFromDTO" : [ "AccountDTO accountDTO" ],
    "getAccounts" : [ ],
    "createAccount" : [ "Account account" ],
    "deleteAccount" : [ "Long id" ],
    "updateAccount" : [ "Account account" ],
    "mapDTOToEntity" : [ "AccountDTO dto" ]
  },
  "Methods" : [ "existsById", "getAccountDTO", "getAccount", "mapEntityToDTO", "updateAccountFromDTO", "getAllAccountDTOs", "createAccountFromDTO", "getAccounts", "createAccount", "deleteAccount", "updateAccount", "mapDTOToEntity" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "createAddressFromDTO" : [ "address.setAddress_id", "updateAddress", "mapEntityToDTO", "setAddress_id", "mapDTOToEntity" ],
    "existsById" : [ "modelMapper.map", "map" ],
    "updateAddressFromDTO" : [ "addressRepository.deleteById", "deleteById" ],
    "createAddress" : [ "save", "addressRepository.save" ],
    "updateAddress" : [ "createAddress", "mapDTOToEntity" ],
    "mapEntityToDTO" : [ "modelMapper.map", "map" ],
    "getAllAddressDTOs" : [ "save", "addressRepository.save" ],
    "getAddress" : [ "mapEntityToDTO", "getAddress" ],
    "deleteAddress" : [ "addressRepository.existsById", "existsById" ],
    "getAllAddresses" : [ "addressRepository.findById", "findById", "orElse" ],
    "mapDTOToEntity" : [ ],
    "getAddressDTO" : [ "Collectors.toList", "stream", "toList", "getAllAddresses", "map", "collect" ]
  },
  "PackageName" : "com.example.demo.service",
  "MethodDetails" : {
    "createAddressFromDTO" : {
      "StartLine" : 50,
      "EndLine" : 53
    },
    "existsById" : {
      "StartLine" : 66,
      "EndLine" : 68
    },
    "updateAddressFromDTO" : {
      "StartLine" : 55,
      "EndLine" : 60
    },
    "createAddress" : {
      "StartLine" : 42,
      "EndLine" : 44
    },
    "updateAddress" : {
      "StartLine" : 46,
      "EndLine" : 48
    },
    "mapEntityToDTO" : {
      "StartLine" : 70,
      "EndLine" : 72
    },
    "getAllAddressDTOs" : {
      "StartLine" : 36,
      "EndLine" : 40
    },
    "getAddress" : {
      "StartLine" : 24,
      "EndLine" : 26
    },
    "deleteAddress" : {
      "StartLine" : 62,
      "EndLine" : 64
    },
    "getAllAddresses" : {
      "StartLine" : 20,
      "EndLine" : 22
    },
    "mapDTOToEntity" : {
      "StartLine" : 74,
      "EndLine" : 76
    },
    "getAddressDTO" : {
      "StartLine" : 28,
      "EndLine" : 34
    }
  },
  "ClassAnnotations" : [ "Service", "RequiredArgsConstructor" ],
  "Imports" : [ "org.modelmapper.ModelMapper", "java.util.List", "com.example.demo.model.AddressDTO", "com.example.demo.model.Address", "org.springframework.stereotype.Service", "lombok.RequiredArgsConstructor", "com.example.demo.repository.AddressRepository", "java.util.stream.Collectors" ],
  "Code" : "package com.example.demo.service;\r\n\r\nimport com.example.demo.model.Address;\r\nimport com.example.demo.model.AddressDTO;\r\nimport com.example.demo.repository.AddressRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AddressService {\r\n\r\n    private final ModelMapper modelMapper;\r\n    private final AddressRepository addressRepository;\r\n\r\n    public List<Address> getAllAddresses() {\r\n        return addressRepository.findAll();\r\n    }\r\n\r\n    public Address getAddress(Long id) {\r\n        return addressRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    public AddressDTO getAddressDTO(Long id) {\r\n        Address address = getAddress(id);\r\n        if (address == null) {\r\n            return null;\r\n        }\r\n        return mapEntityToDTO(address);\r\n    }\r\n\r\n    public List<AddressDTO> getAllAddressDTOs() {\r\n        return getAllAddresses().stream()\r\n                .map(this::mapEntityToDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Address createAddress(Address address) {\r\n        return addressRepository.save(address);\r\n    }\r\n\r\n    public Address updateAddress(Address address) {\r\n        return addressRepository.save(address);\r\n    }\r\n\r\n    public Address createAddressFromDTO(AddressDTO addressDTO) {\r\n        Address address = mapDTOToEntity(addressDTO);\r\n        return createAddress(address);\r\n    }\r\n\r\n    public AddressDTO updateAddressFromDTO(Long id, AddressDTO addressDTO) {\r\n        Address address = mapDTOToEntity(addressDTO);\r\n        address.setAddress_id(id);\r\n        Address updatedAddress = updateAddress(address);\r\n        return mapEntityToDTO(updatedAddress);\r\n    }\r\n\r\n    public void deleteAddress(Long id) {\r\n        addressRepository.deleteById(id);\r\n    }\r\n\r\n    public boolean existsById(Long id) {\r\n        return addressRepository.existsById(id);\r\n    }\r\n\r\n    public AddressDTO mapEntityToDTO(Address entity) {\r\n        return modelMapper.map(entity, AddressDTO.class);\r\n    }\r\n\r\n    public Address mapDTOToEntity(AddressDTO dto) {\r\n        return modelMapper.map(dto, Address.class);\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "createAddressFromDTO" : "Address",
    "existsById" : "boolean",
    "updateAddressFromDTO" : "AddressDTO",
    "createAddress" : "Address",
    "updateAddress" : "Address",
    "mapEntityToDTO" : "AddressDTO",
    "getAllAddressDTOs" : "List<AddressDTO>",
    "getAddress" : "Address",
    "deleteAddress" : "void",
    "getAllAddresses" : "List<Address>",
    "mapDTOToEntity" : "Address",
    "getAddressDTO" : "AddressDTO"
  },
  "Fields" : [ "modelMapper", "addressRepository" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "AddressService",
  "MethodParameters" : {
    "createAddressFromDTO" : [ "AddressDTO addressDTO" ],
    "existsById" : [ "Long id" ],
    "updateAddressFromDTO" : [ "AddressDTO addressDTO", "Long id" ],
    "createAddress" : [ "Address address" ],
    "updateAddress" : [ "Address address" ],
    "mapEntityToDTO" : [ "Address entity" ],
    "getAllAddressDTOs" : [ ],
    "getAddress" : [ "Long id" ],
    "deleteAddress" : [ "Long id" ],
    "getAllAddresses" : [ ],
    "mapDTOToEntity" : [ "AddressDTO dto" ],
    "getAddressDTO" : [ "Long id" ]
  },
  "Methods" : [ "createAddressFromDTO", "existsById", "updateAddressFromDTO", "createAddress", "updateAddress", "mapEntityToDTO", "getAllAddressDTOs", "getAddress", "deleteAddress", "getAllAddresses", "mapDTOToEntity", "getAddressDTO" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "process" : [ ]
  },
  "PackageName" : "com.example.demo.service",
  "MethodDetails" : {
    "process" : {
      "StartLine" : 5,
      "EndLine" : 7
    }
  },
  "ClassAnnotations" : [ ],
  "Imports" : [ ],
  "Code" : "package com.example.demo.service;\r\n\r\npublic abstract class BaseService<T> {\r\n\r\n    public void process(T entity) {\r\n        System.out.println(\"siema \" + entity.toString());\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "process" : "void"
  },
  "Fields" : [ ],
  "MethodAnnotations" : [ ],
  "ClassName" : "BaseService",
  "MethodParameters" : {
    "process" : [ "T entity" ]
  },
  "Methods" : [ "process" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "createClient" : [ "clientRepository.save", "save" ],
    "createClientFromDTO" : [ "updateClient", "mapEntityToDTO", "mapDTOToEntity", "client.setClient_id", "setClient_id" ],
    "process" : [ ],
    "updateClient" : [ "createClient", "mapDTOToEntity" ],
    "deleteClient" : [ "existsById", "clientRepository.existsById" ],
    "findAllClients" : [ "clientRepository.findById", "findById", "orElse" ],
    "findClientById" : [ "findClientById", "mapEntityToDTO" ],
    "getClientDTO" : [ "Collectors.toList", "stream", "toList", "map", "collect", "findAllClients" ],
    "existsById" : [ "modelMapper.map", "map" ],
    "getAllClientDTOs" : [ "clientRepository.save", "save" ],
    "mapEntityToDTO" : [ "modelMapper.map", "map" ],
    "updateClientFromDTO" : [ "deleteById", "clientRepository.deleteById" ],
    "mapDTOToEntity" : [ "client.getName", "println", "getName" ]
  },
  "PackageName" : "com.example.demo.service",
  "MethodDetails" : {
    "createClient" : {
      "StartLine" : 42,
      "EndLine" : 44
    },
    "createClientFromDTO" : {
      "StartLine" : 50,
      "EndLine" : 53
    },
    "process" : {
      "StartLine" : 78,
      "EndLine" : 82
    },
    "updateClient" : {
      "StartLine" : 46,
      "EndLine" : 48
    },
    "deleteClient" : {
      "StartLine" : 62,
      "EndLine" : 64
    },
    "findAllClients" : {
      "StartLine" : 20,
      "EndLine" : 22
    },
    "findClientById" : {
      "StartLine" : 24,
      "EndLine" : 26
    },
    "getClientDTO" : {
      "StartLine" : 28,
      "EndLine" : 34
    },
    "existsById" : {
      "StartLine" : 66,
      "EndLine" : 68
    },
    "getAllClientDTOs" : {
      "StartLine" : 36,
      "EndLine" : 40
    },
    "mapEntityToDTO" : {
      "StartLine" : 70,
      "EndLine" : 72
    },
    "updateClientFromDTO" : {
      "StartLine" : 55,
      "EndLine" : 60
    },
    "mapDTOToEntity" : {
      "StartLine" : 74,
      "EndLine" : 76
    }
  },
  "ClassAnnotations" : [ "Service", "RequiredArgsConstructor" ],
  "Imports" : [ "org.modelmapper.ModelMapper", "java.util.List", "com.example.demo.model.Client", "org.springframework.stereotype.Service", "lombok.RequiredArgsConstructor", "java.util.stream.Collectors", "com.example.demo.repository.ClientRepository", "com.example.demo.model.ClientDTO" ],
  "Code" : "package com.example.demo.service;\r\n\r\nimport com.example.demo.model.Client;\r\nimport com.example.demo.model.ClientDTO;\r\nimport com.example.demo.repository.ClientRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class ClientService extends BaseService<Client> {\r\n\r\n    private final ClientRepository clientRepository;\r\n    private final ModelMapper modelMapper;\r\n\r\n    public List<Client> findAllClients() {\r\n        return clientRepository.findAll();\r\n    }\r\n\r\n    public Client findClientById(Long id) {\r\n        return clientRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    public ClientDTO getClientDTO(Long id) {\r\n        Client client = findClientById(id);\r\n        if (client == null) {\r\n            return null;\r\n        }\r\n        return mapEntityToDTO(client);\r\n    }\r\n\r\n    public List<ClientDTO> getAllClientDTOs() {\r\n        return findAllClients().stream()\r\n                .map(this::mapEntityToDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Client createClient(Client client) {\r\n        return clientRepository.save(client);\r\n    }\r\n\r\n    public Client updateClient(Client client) {\r\n        return clientRepository.save(client);\r\n    }\r\n\r\n    public Client createClientFromDTO(ClientDTO clientDTO) {\r\n        Client client = mapDTOToEntity(clientDTO);\r\n        return createClient(client);\r\n    }\r\n\r\n    public ClientDTO updateClientFromDTO(Long id, ClientDTO clientDTO) {\r\n        Client client = mapDTOToEntity(clientDTO);\r\n        client.setClient_id(id);\r\n        Client updatedClient = updateClient(client);\r\n        return mapEntityToDTO(updatedClient);\r\n    }\r\n\r\n    public void deleteClient(Long id) {\r\n        clientRepository.deleteById(id);\r\n    }\r\n\r\n    public boolean existsById(Long id) {\r\n        return clientRepository.existsById(id);\r\n    }\r\n\r\n    public ClientDTO mapEntityToDTO(Client entity) {\r\n        return modelMapper.map(entity, ClientDTO.class);\r\n    }\r\n\r\n    public Client mapDTOToEntity(ClientDTO dto) {\r\n        return modelMapper.map(dto, Client.class);\r\n    }\r\n\r\n    @Override\r\n    public void process(Client client) {\r\n\r\n        System.out.println(\"elo1 \" + client.getName());\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "createClient" : "Client",
    "createClientFromDTO" : "Client",
    "process" : "void",
    "updateClient" : "Client",
    "deleteClient" : "void",
    "findAllClients" : "List<Client>",
    "findClientById" : "Client",
    "getClientDTO" : "ClientDTO",
    "existsById" : "boolean",
    "getAllClientDTOs" : "List<ClientDTO>",
    "mapEntityToDTO" : "ClientDTO",
    "updateClientFromDTO" : "ClientDTO",
    "mapDTOToEntity" : "Client"
  },
  "Fields" : [ "modelMapper", "clientRepository" ],
  "MethodAnnotations" : [ "Override" ],
  "ClassName" : "ClientService",
  "MethodParameters" : {
    "createClient" : [ "Client client" ],
    "createClientFromDTO" : [ "ClientDTO clientDTO" ],
    "process" : [ "Client client" ],
    "updateClient" : [ "Client client" ],
    "deleteClient" : [ "Long id" ],
    "findAllClients" : [ ],
    "findClientById" : [ "Long id" ],
    "getClientDTO" : [ "Long id" ],
    "existsById" : [ "Long id" ],
    "getAllClientDTOs" : [ ],
    "mapEntityToDTO" : [ "Client entity" ],
    "updateClientFromDTO" : [ "ClientDTO clientDTO", "Long id" ],
    "mapDTOToEntity" : [ "ClientDTO dto" ]
  },
  "Extends" : "BaseService",
  "Methods" : [ "createClient", "createClientFromDTO", "process", "updateClient", "deleteClient", "findAllClients", "findClientById", "getClientDTO", "existsById", "getAllClientDTOs", "mapEntityToDTO", "updateClientFromDTO", "mapDTOToEntity" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "existsById" : [ "modelMapper.map", "map" ],
    "getTransactionDTO" : [ "transactionDTO.getReceiver_id", "transactionDTO.getSender_id", "auxilaryFunctions.accountExists", "LocalDate.now", "getReceiver_id", "getSender_id", "now", "transaction.setTimestamp", "addTransaction", "mapDTOToEntity", "accountExists", "setTimestamp" ],
    "updateTransaction" : [ "deleteById", "transactionRepository.deleteById" ],
    "mapEntityToDTO" : [ "modelMapper.map", "map" ],
    "addTransaction" : [ "transactionRepository.save", "save" ],
    "deleteTransaction" : [ "existsById", "transactionRepository.existsById" ],
    "createTransactionFromDTO" : [ "transactionDTO.getReceiver_id", "transactionDTO.getSender_id", "auxilaryFunctions.accountExists", "setTransaction_id", "getReceiver_id", "getSender_id", "updateTransaction", "mapEntityToDTO", "transaction.setTransaction_id", "mapDTOToEntity", "accountExists" ],
    "updateTransactionFromDTO" : [ ],
    "getTransactionsForAccount" : [ "findById", "transactionRepository.findById", "orElse" ],
    "mapDTOToEntity" : [ "Collectors.toList", "stream", "toList", "getTransactionsForAccount", "map", "collect" ],
    "getTransactionDTOsForAccount" : [ "mapEntityToDTO", "getTransaction" ],
    "getTransaction" : [ "transactionRepository.save", "save" ]
  },
  "PackageName" : "com.example.demo.service",
  "MethodDetails" : {
    "existsById" : {
      "StartLine" : 43,
      "EndLine" : 45
    },
    "getTransactionDTO" : {
      "StartLine" : 61,
      "EndLine" : 67
    },
    "updateTransaction" : {
      "StartLine" : 35,
      "EndLine" : 37
    },
    "mapEntityToDTO" : {
      "StartLine" : 47,
      "EndLine" : 49
    },
    "addTransaction" : {
      "StartLine" : 31,
      "EndLine" : 33
    },
    "deleteTransaction" : {
      "StartLine" : 39,
      "EndLine" : 41
    },
    "createTransactionFromDTO" : {
      "StartLine" : 69,
      "EndLine" : 76
    },
    "updateTransactionFromDTO" : {
      "StartLine" : 78,
      "EndLine" : 86
    },
    "getTransactionsForAccount" : {
      "StartLine" : 23,
      "EndLine" : 25
    },
    "mapDTOToEntity" : {
      "StartLine" : 51,
      "EndLine" : 53
    },
    "getTransactionDTOsForAccount" : {
      "StartLine" : 55,
      "EndLine" : 59
    },
    "getTransaction" : {
      "StartLine" : 27,
      "EndLine" : 29
    }
  },
  "ClassAnnotations" : [ "Service", "RequiredArgsConstructor" ],
  "Imports" : [ "com.example.demo.AuxilaryFunctions", "org.modelmapper.ModelMapper", "java.util.List", "com.example.demo.model.TransactionDTO", "org.springframework.stereotype.Service", "java.time.LocalDate", "lombok.RequiredArgsConstructor", "com.example.demo.model.Transaction", "java.util.stream.Collectors", "com.example.demo.repository.TransactionRepository" ],
  "Code" : "package com.example.demo.service;\r\n\r\nimport com.example.demo.AuxilaryFunctions;\r\nimport com.example.demo.model.Transaction;\r\nimport com.example.demo.model.TransactionDTO;\r\nimport com.example.demo.repository.TransactionRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class TransactionService {\r\n\r\n    private final ModelMapper modelMapper;\r\n    private final TransactionRepository transactionRepository;\r\n    private final AuxilaryFunctions auxilaryFunctions;\r\n\r\n    public List<Transaction> getTransactionsForAccount(Long accountId) {\r\n        return transactionRepository.findAllTransactionsForAccount(accountId);\r\n    }\r\n\r\n    public Transaction getTransaction(Long id) {\r\n        return transactionRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    public Transaction addTransaction(Transaction transaction) {\r\n        return transactionRepository.save(transaction);\r\n    }\r\n\r\n    public Transaction updateTransaction(Transaction transaction) {\r\n        return transactionRepository.save(transaction);\r\n    }\r\n\r\n    public void deleteTransaction(Long id) {\r\n        transactionRepository.deleteById(id);\r\n    }\r\n\r\n    public boolean existsById(Long id) {\r\n        return transactionRepository.existsById(id);\r\n    }\r\n\r\n    public TransactionDTO mapEntityToDTO(Transaction entity) {\r\n        return modelMapper.map(entity, TransactionDTO.class);\r\n    }\r\n\r\n    public Transaction mapDTOToEntity(TransactionDTO dto) {\r\n        return modelMapper.map(dto, Transaction.class);\r\n    }\r\n\r\n    public List<TransactionDTO> getTransactionDTOsForAccount(Long accountId) {\r\n        return getTransactionsForAccount(accountId).stream()\r\n                .map(this::mapEntityToDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public TransactionDTO getTransactionDTO(Long id) {\r\n        Transaction transaction = getTransaction(id);\r\n        if (transaction == null) {\r\n            return null;\r\n        }\r\n        return mapEntityToDTO(transaction);\r\n    }\r\n\r\n    public Transaction createTransactionFromDTO(TransactionDTO transactionDTO) {\r\n        if (!auxilaryFunctions.accountExists(transactionDTO.getSender_id(), transactionDTO.getReceiver_id())) {\r\n            return null;\r\n        }\r\n        Transaction transaction = mapDTOToEntity(transactionDTO);\r\n        transaction.setTimestamp(LocalDate.now());\r\n        return addTransaction(transaction);\r\n    }\r\n\r\n    public TransactionDTO updateTransactionFromDTO(Long id, TransactionDTO transactionDTO) {\r\n        if (!auxilaryFunctions.accountExists(transactionDTO.getSender_id(), transactionDTO.getReceiver_id())) {\r\n            return null;\r\n        }\r\n        Transaction transaction = mapDTOToEntity(transactionDTO);\r\n        transaction.setTransaction_id(id);\r\n        Transaction updatedTransaction = updateTransaction(transaction);\r\n        return mapEntityToDTO(updatedTransaction);\r\n    }\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "existsById" : "boolean",
    "getTransactionDTO" : "TransactionDTO",
    "updateTransaction" : "Transaction",
    "mapEntityToDTO" : "TransactionDTO",
    "addTransaction" : "Transaction",
    "deleteTransaction" : "void",
    "createTransactionFromDTO" : "Transaction",
    "updateTransactionFromDTO" : "TransactionDTO",
    "getTransactionsForAccount" : "List<Transaction>",
    "mapDTOToEntity" : "Transaction",
    "getTransactionDTOsForAccount" : "List<TransactionDTO>",
    "getTransaction" : "Transaction"
  },
  "Fields" : [ "modelMapper", "auxilaryFunctions", "transactionRepository" ],
  "MethodAnnotations" : [ ],
  "ClassName" : "TransactionService",
  "MethodParameters" : {
    "existsById" : [ "Long id" ],
    "getTransactionDTO" : [ "Long id" ],
    "updateTransaction" : [ "Transaction transaction" ],
    "mapEntityToDTO" : [ "Transaction entity" ],
    "addTransaction" : [ "Transaction transaction" ],
    "deleteTransaction" : [ "Long id" ],
    "createTransactionFromDTO" : [ "TransactionDTO transactionDTO" ],
    "updateTransactionFromDTO" : [ "TransactionDTO transactionDTO", "Long id" ],
    "getTransactionsForAccount" : [ "Long accountId" ],
    "mapDTOToEntity" : [ "TransactionDTO dto" ],
    "getTransactionDTOsForAccount" : [ "Long accountId" ],
    "getTransaction" : [ "Long id" ]
  },
  "Methods" : [ "existsById", "getTransactionDTO", "updateTransaction", "mapEntityToDTO", "addTransaction", "deleteTransaction", "createTransactionFromDTO", "updateTransactionFromDTO", "getTransactionsForAccount", "mapDTOToEntity", "getTransactionDTOsForAccount", "getTransaction" ],
  "ObjectCreations" : [ ]
}, {
  "MethodCalls" : {
    "contextLoads" : [ ]
  },
  "PackageName" : "com.example.demo",
  "MethodDetails" : {
    "contextLoads" : {
      "StartLine" : 9,
      "EndLine" : 11
    }
  },
  "ClassAnnotations" : [ "SpringBootTest" ],
  "Imports" : [ "org.junit.jupiter.api.Test", "org.springframework.boot.test.context.SpringBootTest" ],
  "Code" : "package com.example.demo;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\nclass DemoApplicationTests {\r\n\r\n\t@Test\r\n\tvoid contextLoads() {\r\n\t}\r\n\r\n}\r\n",
  "FieldAnnotations" : [ ],
  "MethodReturnTypes" : {
    "contextLoads" : "void"
  },
  "Fields" : [ ],
  "MethodAnnotations" : [ "Test" ],
  "ClassName" : "DemoApplicationTests",
  "MethodParameters" : {
    "contextLoads" : [ ]
  },
  "Methods" : [ "contextLoads" ],
  "ObjectCreations" : [ ]
} ]